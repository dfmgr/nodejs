#!/usr/bin/env sh
# shellcheck shell=sh
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202305010900-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.com
# @@License          :  WTFPL
# @@ReadME           :  setup_fnm --help
# @@Copyright        :  Copyright: (c) 2023 Jason Hempstead, Casjays Developments
# @@Created          :  Monday, May 01, 2023 09:00 EDT
# @@File             :  setup_fnm
# @@Description      :  Fast Node Manager installer
# @@Changelog        :  New script
# @@TODO             :  Better documentation
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  shell/sh
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC2317
# shellcheck disable=SC2120
# shellcheck disable=SC2155
# shellcheck disable=SC2199
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0" 2>/dev/null)"
VERSION="202305010900-git"
RUN_USER="$USER"
SET_UID="$(id -u)"
SCRIPT_SRC_DIR="$(cd "$(dirname "$0")" && pwd)"
SETUP_FNM_CWD="$(realpath "$PWD")"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  __printf_color() { printf '%b' "$1\n" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  __printf_color() { { [ -z "$2" ] || DEFAULT_COLOR=$2; } && printf "%b" "$(tput setaf "$DEFAULT_COLOR" 2>/dev/null)" "$1\n" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check for command
__cmd_exists() { which $1 >/dev/null 2>&1 || return 1; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# custom functions
__install_fnm_cmd() {
  exitCode=0
  [ -n "$TMPDIR" ] || TMPDIR="/tmp"
  SETUP_FNM_TEMP_FILE="$(mktemp $TMPDIR/${APPNAME}_XXXXXX 2>/dev/null)"
  curl -q -LSsf "$SETUP_FNM_INSTALL_SCRIPT" -o "$SETUP_FNM_TEMP_FILE" || { __printf_color "Failed to download installer" >&2 && exit 1; }
  bash "$SETUP_FNM_TEMP_FILE" --install-dir "$HOME/.local/bin" --skip-shell >/dev/null 2>&1
  exitCode=$?
  [ -f "$SETUP_FNM_TEMP_FILE" ] && rm -Rf "$SETUP_FNM_TEMP_FILE"
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Define variables
DEFAULT_COLOR="254"
SETUP_FNM_EXIT_STATUS=0
[ -n "$NODE_MANAGER" ] || NODE_MANAGER="fnm"
[ -n "$FNM_BIN" ] || FNM_BIN="$HOME/.local/bin"
[ -n "$FNM_DIR" ] || FNM_DIR="$HOME/.local/share/nodejs/fnm"
[ -n "$SETUP_FNM_INSTALL_SCRIPT" ] || SETUP_FNM_INSTALL_SCRIPT="https://raw.githubusercontent.com/Schniz/fnm/master/.ci/install.sh"
export FNM_DIR FNM_BIN FNM_NODE_VERSION NODE_MANAGER
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "h,r,v:" --long "help,remove,version:" -a -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "$setopts" 2>/dev/null
while :; do
  case "$1" in
  --help | -h)
    shift 1
    __printf_color "Usage: $APPNAME --[remove,version=16]"
    exit
    ;;
  --remove | -r)
    shift 1
    SETUP_FNM_REMOVE="true"
    ;;
  --version | -v)
    FNM_NODE_VERSION="$2"
    shift 2
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ "$NODE_MANAGER" = "fnm" ] || exit 0
[ -n "$FNM_NODE_VERSION" ] || FNM_NODE_VERSION="18"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Main application
case "$1" in
remove)
  __printf_color "Removing FNM from your system" 3
  [ -n "$FNM_DIR" ] && rm -Rf "$FNM_DIR" "$FNM_BIN/fnm"
  if [ ! -d "$FNM_DIR/.git" ] && ! __cmd_exists fnm; then
    __printf_color "FNM Has been removed" 2
  fi
  exit
  ;;
*)
  if [ "$SETUP_FNM_REMOVE" = "true" ]; then
    __printf_color "Removing FNM from your system" 3
    [ -n "$FNM_DIR" ] && rm -Rf "$FNM_DIR" "$FNM_BIN/fnm"
    if [ ! -d "$FNM_DIR/.git" ] && ! __cmd_exists fnm; then
      __printf_color "FNM Has been removed" 2
    fi
    exit
  fi
  __printf_color "installing NVM" 3
  mkdir -p "$FNM_DIR"
  if [ -d "$FNM_DIR/.git" ]; then
    __printf_color "Updating NVM" 6
    git -C $FNM_DIR pull -q >/dev/null 2>&1
  else
    __printf_color "Running the FNM script" 6
    __install_fnm_cmd
  fi
  if ! __cmd_exists fnm; then
    __printf_color "Failed to install FNM" 1 >&2
    exit 1
  fi
  __printf_color "installing node version $FNM_NODE_VERSION" 6
  eval "$(fnm env)"
  fnm install "$FNM_NODE_VERSION" >/dev/null 2>&1
  fnm ls | grep -q "$FNM_NODE_VERSION" && fnm use "$FNM_NODE_VERSION" >/dev/null 2>&1 && fnm default "$FNM_NODE_VERSION" >/dev/null 2>&1
  if __cmd_exists fnm && __cmd_exists node; then
    version="$(node --version 2>/dev/null)"
    __printf_color "FNM is setup to use node $version by default" 2
    SETUP_FNM_EXIT_STATUS=0
  else
    __printf_color "FNM Failed to install" 1 >&2
    SETUP_FNM_EXIT_STATUS=1
  fi
  __printf_color "fnm install dir: $FNM_DIR" 123
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $SETUP_FNM_EXIT_STATUS
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
