#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202207042108-git
# @Author            :  Jason Hempstead
# @Contact           :  jason@casjaysdev.com
# @License           :  LICENSE.md
# @ReadME            :  setup_node --help
# @Copyright         :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @Created           :  Saturday, Jul 09, 2022 21:15 EDT
# @File              :  setup_node
# @Description       :  install nodejs on apt/yum based systems
# @TODO              :
# @Other             :
# @Resource          :
# @sudo/root         :  no
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0")"
VERSION="202207042108-git"
HOME="${USER_HOME:-$HOME}"
USER="${SUDO_USER:-$USER}"
RUN_USER="${SUDO_USER:-$USER}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set bash options
if [[ "$1" == "--debug" ]]; then shift 1 && set -xo pipefail && export SCRIPT_OPTS="--debug" && export _DEBUG="on"; fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Main function file
if [ -f "$SRC_DIR/functions.bash" ]; then
  FUNCTIONS_DIR="$SRC_DIR"
  . "$FUNCTIONS_DIR/functions.bash"
elif [ -f "$HOME/.local/bin/functions.bash" ]; then
  FUNCTIONS_DIR="$HOME/.local/bin"
  . "$FUNCTIONS_DIR/functions.bash"
else
  printf "\t\t\033[0;31m%s \033[0m\n" "Couldn't source the functions file from $FUNCTIONS_DIR"
  return 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# helper function
__version() { app_version; }
__help() {
  app_help "Usage: setup_fnm  -  setup_fnm --version" \
    "-v, --version          -  display version" \
    "-h, --help             -  display help"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for needed applications
cmd_exists bash || exit 1 # exit if not found

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set variables
SETUP_NODE_CONFIG_DIR="$HOME/.config/setup_node/settings.conf"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set functions
__version() {
  command="$(type -P "$PROG")"
  grep -E '[".#] @[A-Z]' "$command"
  grep -E '[".#]#@[A-Z]' "$command"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__help() {
  printf_color() { printf "%b" "$(tput setaf "$1" 2>/dev/null)" "\t\t$2\n" "$(tput sgr0 2>/dev/null)"; }
  printf_color "4" "$(grep ^"# @Description" "setup_node | grep ' : " || setup_node help)"
  printf_color "4" "usage: setup_node  |  setup_node --version"
  exit
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__install_yarn() {
  printf "Installing yarn\n"
  sudo bash -c "$(curl -q -fsSL https://yarnpkg.com/install.sh &>/dev/null)"
  cmd_exists yarn && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# NodeJS check
__node_check() {
  if cmd_exists nodejs || cmd_exists node; then
    printf_green "nodejs is already installed"
    return 0
  else
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# npm command
__node_install() {
  if [[ "$1" = "-g" ]]; then
    shift 1
    local npmopts="-g"
  else
    local npmopts=""
  fi
  local exitCode=0
  local args="$*"
  if [ "$(command -v fnm 2>/dev/null)" ]; then
    printf_green "Installing $args using npm from fnm "
    npm i $npmopts $args &>/dev/null || exitCode=1
  elif [ "$(command -v nvm 2>/dev/null)" ]; then
    printf_green "Installing $args using npm from nvm "
    npm i $npmopts $args &>/dev/null || exitCode=1
  else
    printf_green "Installing $args using npm from system npm "
    sudo npm i $npmopts $args &>/dev/null || exitCode=1
  fi
  if [[ "$exitCode" = 0 ]]; then
    printf_blue "Successfully installed $args"
    exitCode=0
  else
    printf_red "Failed to install $args"
    exitCode=1
  fi
  return ${exitCode:-$?}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__install_node() {
  local exitCode=0
  sudoif || printf_exit "This requires access to sudo"
  if cmd_exists apt-cache; then
    sudo bash -c "$(curl -q -fsSL "$INSTALL_SCRIPT_DEB")" &&
      sudo apt update &&
      sudo apt install -yy build-essential &&
      sudo apt install -yy nodejs &&
      sudo apt autoremove -yy || exitCode=1
  elif cmd_exists yum; then
    sudo bash -c "$(curl -q -fsSL "$INSTALL_SCRIPT_RPM")" &&
      sudo yum groupinstall -y 'Development Tools' &&
      sudo yum install -y nodejs || exitCode=1
  elif cmd_exists dnf; then
    sudo bash -c "$(curl -q -fsSL "$INSTALL_SCRIPT_RPM")" &&
      sudo dnf groupinstall -y 'Development Tools' &&
      sudo dnf install -y nodejs || exitCode=1
  else
    cmd_exists pkmgr &&
      pkmgr silent install nodejs || exitCode=1
  fi
  if [ "$exitCode" = 0 ]; then
    __install_yarn || exitCode=1
  fi
  cmd_exists pkmgr && cmd_exists npm && pkmgr npm install npm-check-updates
  return ${exitCode:-$?}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set additional variables
INSTALL_SCRIPT_DEB="${INSTALL_SCRIPT_DEB:-https://deb.nodesource.com/setup_current.x}"
INSTALL_SCRIPT_RPM="${INSTALL_SCRIPT_RPM:-https://rpm.nodesource.com/setup_current.x}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# bring in user config
[ -f "$SETUP_NODE_CONFIG_DIR/settings.conf" ] && . "$SETUP_NODE_CONFIG_DIR/settings.conf"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY="how2 emoj surge wikit vercel lessmd heroku eslint taskbook prettier vue "
ARRAY+="gitio-cli now-config speed-test angular auto-install readme-md-generator "
ARRAY+="npm-check-updates github-feed-cli"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Main application
case "$1" in
--help)
  shift 1
  __help
  ;;
--version)
  shift 1
  __version
  ;;
--list)
  shift 1
  printf '%s\n' "$ARRAY" | tr ' ' '\n' | sort | column | printf_readline
  exit
  ;;
how2)
  shift 1
  cmd_exists npm && __node_install "-g" "how2"
  ;;
emoj)
  shift 1
  cmd_exists npm && __node_install "-g" "emoj"
  ;;
surge)
  shift 1
  cmd_exists npm && __node_install "-g" "surge"
  ;;
wikit)
  shift 1
  cmd_exists npm && __node_install "-g" "wikit"
  ;;
vercel)
  shift 1
  cmd_exists npm && __node_install "-g" "vercel"
  ;;
lessmd)
  shift 1
  cmd_exists npm && __node_install "-g" "lessmd"
  ;;
heroku)
  shift 1
  cmd_exists npm && __node_install "-g" "heroku"
  ;;
eslint)
  shift 1
  cmd_exists npm && __node_install "-g" "eslint"
  ;;
taskbook)
  shift 1
  cmd_exists npm && __node_install "-g" "taskbook"
  ;;
prettier)
  shift 1
  cmd_exists npm && __node_install "-g" "prettier"
  ;;
vue)
  shift 1
  cmd_exists npm && __node_install "-g" "@vue/cli"
  ;;
gitio-cli)
  shift 1
  cmd_exists npm && __node_install "-g" "gitio-cli"
  ;;
now-config)
  shift 1
  cmd_exists npm && __node_install "-g" "now-config"
  ;;
speed-test)
  shift 1
  cmd_exists npm && __node_install "-g" "speed-test"
  ;;
angular)
  shift 1
  cmd_exists npm && __node_install "-g" "@angular/cli"
  ;;
auto-install)
  shift 1
  cmd_exists npm && __node_install "-g" "auto-install"
  ;;
readme-md-generator)
  shift 1
  cmd_exists npm && __node_install "-g" "readme-md-generator"
  ;;
npm-check-updates)
  shift 1
  cmd_exists npm && __node_install "-g" "npm-check-updates"
  ;;
github-feed-cli)
  shift 1
  cmd_exists npm && __node_install "-g" "github-feed-cli"
  ;;
*)
  if [[ $# -eq 0 ]]; then
    __node_check || __install_node
  elif [[ "$1" = "npx" ]]; then
    shift 1
    cmd_exists npx && npx "$*"
  else
    cmd_exists npm && __node_install "-g" "$@"
  fi
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $?
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# end
