#!/usr/bin/env sh
# shellcheck shell=sh
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202305010900-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  setup_nvm --help
# @@Copyright        :  Copyright: (c) 2023 Jason Hempstead, Casjays Developments
# @@Created          :  Monday, May 01, 2023 09:00 EDT
# @@File             :  setup_nvm
# @@Description      :  Node Version Manager installer
# @@Changelog        :  New script
# @@TODO             :  Better documentation
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  shell/sh
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC2317
# shellcheck disable=SC2120
# shellcheck disable=SC2155
# shellcheck disable=SC2199
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0" 2>/dev/null)"
VERSION="202305010900-git"
RUN_USER="$USER"
SET_UID="$(id -u)"
SCRIPT_SRC_DIR="$(cd "$(dirname "$0")" && pwd)"
SETUP_NVM_CWD="$(realpath "$PWD")"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  __printf_color() { printf '%b' "$1\n" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  __printf_color() { { [ -z "$2" ] || DEFAULT_COLOR=$2; } && printf "%b" "$(tput setaf "$DEFAULT_COLOR" 2>/dev/null)" "$1\n" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check for command
__cmd_exists() { which $1 >/dev/null 2>&1 || return 1; }
__function_exists() { builtin type $1 >/dev/null 2>&1 || return 1; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# custom functions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Define variables
DEFAULT_COLOR="254"
SETUP_NVM_EXIT_STATUS=0
[ -n "$NODE_MANAGER" ] || NODE_MANAGER="nvm"
[ -n "$NVM_BIN" ] || NVM_BIN="$HOME/.local/bin"
[ -n "$NVM_DIR" ] || NVM_DIR="$HOME/.local/share/nodejs/nvm"
export NODE_MANAGER NVM_DIR NVM_BIN
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "h,r,v:" --long "help,remove,version:" -a -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "$setopts" 2>/dev/null
while :; do
  case "$1" in
  --help | -h)
    shift 1
    __printf_color "Usage: $APPNAME --[remove,version=16]"
    exit
    ;;
  --remove | -r)
    shift 1
    SETUP_NVM_REMOVE="true"
    ;;
  --version | -v)
    NVM_NODE_VERSION="$2"
    shift 2
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ -n "$NVM_NODE_VERSION" ] || NVM_NODE_VERSION="18"
if [ "$NODE_MANAGER" != "nvm" ]; then
  __printf_color "nvm is not set to be your node manager" 3 >&2
  __printf_color "Currently $NODE_MANAGER is set for node management" 3 >&2
  exit 1
fi
[ -d "$NVM_BIN" ] || mkdir -p "$NVM_BIN"
[ -d "$NVM_DIR" ] || mkdir -p "$NVM_DIR"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Main application
case "$1" in
remove)
  if [ -d "$NVM_DIR" ]; then
    __printf_color "Removing NVM from your system" 1
    rm -Rf "$NVM_DIR" && [ ! -d "$NVM_DIR/.git" ] && __printf_color "NVM Has been removed" 2
    exit $?
  else
    __printf_color "NVM is not installed" >&2
    exit 1
  fi
  ;;
*)
  if [ -d "$NVM_DIR/.git" ]; then
    __printf_color "Updating NVM in $NVM_DIR" 4
    git -C "$NVM_DIR" pull -q >/dev/null 2>&1
  else
    __printf_color "Installing NVM from git to $NVM_DIR" 4
    git clone "https://github.com/nvm-sh/nvm" "$NVM_DIR" -q >/dev/null 2>&1
  fi
  if [ -f "$HOME/.npmrc" ]; then
    grep -s 'prefix=' "$HOME/.npmrc" >/tmp/npmrc && sed -i "s|prefix=.*||g" "$HOME/.npmrc"
  fi
  [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" || { __printf_color "Failed to install nvm" 1 >&2 && exit 1; }
  if builtin type nvm >/dev/null 2>&1; then
    __printf_color "NVM has been installed" 2
  else
    __printf_color "NVM Failed to install" 1 >&2
  fi
  __printf_color "Configuring NVM to use $NVM_NODE_VERSION" 4
  nvm install $NVM_NODE_VERSION >/dev/null 2>&1 && nvm use $NVM_NODE_VERSION >/dev/null 2>&1
  nvm alias default $NVM_NODE_VERSION >/dev/null 2>&1
  version="$(node --version 2>/dev/null || echo 'node')"
  __printf_color "nvm is set to use: $(nvm current 2>/dev/null)" 2
  if builtin type nvm >/dev/null 2>&1; then
    __printf_color "NVM has been configured" 2
    SETUP_NVM_EXIT_STATUS=0
  else
    __printf_color "NVM Failed to configure" 1 >&2
    SETUP_NVM_EXIT_STATUS=1
  fi
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $SETUP_NVM_EXIT_STATUS
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
